##Code for Machine Learning -Training-Cross-Validation

###bayesglm

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


bayesglm_male <- train(x = input_x_male,
  y = input_y_male,method = "bayesglm", trControl = tune_control, preProcess = c("center","scale"))



bayesglm_female <- train(x = input_x_female,
  y = input_y_female,method = "bayesglm", trControl = tune_control, preProcess = c("center","scale"))

save.image("bayesglm_yeo.RData")






###brnn

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


brnn_male <- train(x = input_x_male,
  y = input_y_male,method = "brnn", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(neurons =seq(1,5,1)))




brnn_female <- train(x = input_x_female,
  y = input_y_female,method = "brnn", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(neurons =seq(1,5,1)))


save.image("brnn_yeo.RData")




###enet

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


enet_male <- train(x = input_x_male,
  y = input_y_male,method = "enet", trControl = tune_control, preProcess = c("center","scale"),
  tuneGrid = expand.grid(fraction = seq(0,1,0.2),lambda=c(0.1,0.01,0.001,0.0001,0.00001)))

enet_female <- train(x = input_x_female,
  y = input_y_female,method = "enet", trControl = tune_control, preProcess = c("center","scale"),
  tuneGrid = expand.grid(fraction = seq(0,1,0.2),lambda=c(0.1,0.01,0.001,0.0001,0.00001)))


save.image("enet_yeo.RData")






###gamboost

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


gamboost_male <- train(x = input_x_male,
  y = input_y_male,method = "gamboost", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mstop =c(50,100,150,200,250),prune =c("yes","no")))





gamboost_female <- train(x = input_x_female,
  y = input_y_female,method = "gamboost", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mstop =c(50,100,150,200,250),prune =c("yes","no")))


save.image("gamboost_yeo.RData")










###gaussprLinear

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models
gaussprLinear_male <- train(x = input_x_male,
  y = input_y_male,method = "gaussprLinear", trControl = tune_control, preProcess = c("center","scale"))


gaussprLinear_female <- train(x = input_x_female,
  y = input_y_female,method = "gaussprLinear", trControl = tune_control, preProcess = c("center","scale"))


save.image("gaussprLinear_yeo.RData")






###gaussprPoly

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

gaussprPoly_male <- train(x = input_x_male,
  y = input_y_male,method = "gaussprPoly", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001)))

gaussprPoly_female <- train(x = input_x_female,
  y = input_y_female,method = "gaussprPoly", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001)))


save.image("gaussprPoly_yeo.RData")








###gaussprRadial

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

gaussprRadial_male <- train(x = input_x_male,
  y = input_y_male,method = "gaussprRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_male),scaled = TRUE)[1],sigest(as.matrix(input_x_male),scaled = TRUE)[3],length.out=5)))



gaussprRadial_female <- train(x = input_x_female,
  y = input_y_female,method = "gaussprRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_female),scaled = TRUE)[1],sigest(as.matrix(input_x_female),scaled = TRUE)[3],length.out=5)))


save.image("gaussprRadial_yeo.RData")



###glm


rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters

set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE # FALSE for reproducible results 
  , savePredictions="final"
)

#train models

glm_male <- train(x = input_x_male,
  y = input_y_male,method = "glm", trControl = tune_control, preProcess = c("center","scale"))

glm_female <- train(x = input_x_female,
  y = input_y_female,method = "glm", trControl = tune_control, preProcess = c("center","scale"))



save.image("glm_yeo.RData")




###icr

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

icr_male <- train(x = input_x_male,
  y = input_y_male,method = "icr", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(n.comp=1:5))



icr_female <- train(x = input_x_female,
  y = input_y_female,method = "icr", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(n.comp=1:5))


save.image("icr_yeo.RData")



###kernelpls

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models
kernelpls_male <- train(x = input_x_male,
  y = input_y_male,method = "kernelpls", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(ncomp =seq(1,5,1)))

kernelpls_female <- train(x = input_x_female,
  y = input_y_female,method = "kernelpls", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(ncomp =seq(1,5,1)))

save.image("kernelpls_yeo.RData")





###pcr

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


pcr_male <- train(x = input_x_male,
  y = input_y_male,method = "pcr", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(ncomp =seq(1,5,1)))



pcr_female <- train(x = input_x_female,
  y = input_y_female,method = "pcr", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(ncomp =seq(1,5,1)))

save.image("pcr_yeo.RData")





###rf

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models
ranger_male <- train(x = input_x_male,
  y = input_y_male,method = "ranger", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mtry=c(2,8,40,178,800),min.node.size=c(1,5,10,15,20),splitrule=c("variance","extratrees","maxstat")))




ranger_female <- train(x = input_x_female,
  y = input_y_female,method = "ranger", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mtry=c(2,8,40,178,800),min.node.size=c(1,5,10,15,20),splitrule=c("variance","extratrees","maxstat")))


save.image("ranger_yeo.RData")




###rf

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

rf_male <- train(x = input_x_male,importance=T,
  y = input_y_male,method = "rf", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mtry=c(2,8,40,178,800)))



rf_female <- train(x = input_x_female,importance=T,
  y = input_y_female,method = "rf", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mtry=c(2,8,40,178,800)))

save.image("rf_yeo.RData")




###rqlasso

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

rqlasso_male <- train(x = input_x_male,
  y = input_y_male,method = "rqlasso", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(lambda=c(0.1,0.0177828,0.0031623,0.0005623,0.0001000)))



rqlasso_female <- train(x = input_x_female,
  y = input_y_female,method = "rqlasso", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(lambda=c(0.1,0.0177828,0.0031623,0.0005623,0.0001000)))

save.image("rqlasso_yeo.RData")








###rvmLinear

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

rvmLinear_male <- train(x = input_x_male,
  y = input_y_male,method = "rvmLinear", trControl = tune_control, preProcess = c("center","scale"))


rvmLinear_female <- train(x = input_x_female,
  y = input_y_female,method = "rvmLinear", trControl = tune_control, preProcess = c("center","scale"))

save.image("rvmLinear_yeo.RData")




###rvmPoly

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


rvmPoly_male <- train(x = input_x_male,
  y = input_y_male,method = "rvmPoly", trControl = tune_control, preProcess = c("center","scale"),
 tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001)))


rvmPoly_female <- train(x = input_x_female,
  y = input_y_female,method = "rvmPoly", trControl = tune_control, preProcess = c("center","scale"),
 tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001)))

save.image("rvmPoly_yeo.RData")






###rvmRadial

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


rvmRadial_male <- train(x = input_x_male,
  y = input_y_male,method = "rvmRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_female),scaled = TRUE)[1],sigest(as.matrix(input_x_female),scaled = TRUE)[3],length.out=5)))



rvmRadial_female <- train(x = input_x_female,
  y = input_y_female,method = "rvmRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_female),scaled = TRUE)[1],sigest(as.matrix(input_x_female),scaled = TRUE)[3],length.out=5)))

save.image("rvmRadial_yeo.RData")



rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


spls_male <- train(x = input_x_male,
  y = input_y_male,method = "spls", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(eta=seq(0,1,0.2),K=seq(1,5,1),kappa=0.5))

spls_female <- train(x = input_x_female,
  y = input_y_female,method = "spls", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(eta=seq(0,1,0.2),K=seq(1,5,1),kappa=0.5))

save.image("spls_yeo.RData")


###svmLinear3

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


svmLinear3_male <- train(x = input_x_male,
  y = input_y_male,method = "svmLinear3", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(cost=c(0.25,.5,1,2,4,8,16,32,64,128),Loss=c("L1","L2")))




svmLinear3_female <- train(x = input_x_female,
  y = input_y_female,method = "svmLinear3", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(cost=c(0.25,.5,1,2,4,8,16,32,64,128),Loss=c("L1","L2")))


save.image("svmLinear3_yeo.RData")







###svmPoly

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


svmPoly_male <- train(x = input_x_male,
  y = input_y_male,method = "svmPoly", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001),C=c(0.25,.5,1,2,4)))


svmPoly_female <- train(x = input_x_female,
  y = input_y_female,method = "svmPoly", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001),C=c(0.25,.5,1,2,4)))


save.image("svmPoly_yeo.RData")






###svmRadial

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


svmRadial_male <- train(x = input_x_male,
  y = input_y_male,method = "svmRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_male),scaled = TRUE)[1],sigest(as.matrix(input_x_male),scaled = TRUE)[3],length.out=5),C=c(0.25,.5,1,2,4)))


svmRadial_female <- train(x = input_x_female,
  y = input_y_female,method = "svmRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_female),scaled = TRUE)[1],sigest(as.matrix(input_x_female),scaled = TRUE)[3],length.out=5),C=c(0.25,.5,1,2,4)))


save.image("svmRadial_yeo.RData")



#xgbTree

rm(list=ls()) 

#Load packages
library(doParallel)
library(caret)
library(xgboost)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters
nrounds=1000


set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)



tune_grid <- expand.grid(
  nrounds = seq(from = 200, to = nrounds, by = 50),
  eta = c(0.025, 0.05, 0.1, 0.3),
  max_depth = c(2, 3, 4, 5, 6),
  gamma = 0,
  colsample_bytree = 1,
  min_child_weight = 1,
  subsample = 1
)



xgb_tune <- caret::train(
  x = input_x_male,
  y = input_y_male,
  trControl = tune_control,
  tuneGrid = tune_grid,
  method = "xgbTree",
  verbose = TRUE
)





tune_grid2 <- expand.grid(
  nrounds = seq(from = 50, to = nrounds, by = 50),
  eta = xgb_tune$bestTune$eta,
  max_depth = ifelse(xgb_tune$bestTune$max_depth == 2,
    c(xgb_tune$bestTune$max_depth:4),
    xgb_tune$bestTune$max_depth - 1:xgb_tune$bestTune$max_depth + 1),
  gamma = 0,
  colsample_bytree = 1,
  min_child_weight = c(1, 2, 3),
  subsample = 1
)

xgb_tune2 <- caret::train(
  x = input_x_male,
  y = input_y_male,
  trControl = tune_control,
  tuneGrid = tune_grid2,
  method = "xgbTree",
  verbose = TRUE
)



tune_grid3 <- expand.grid(
  nrounds = seq(from = 50, to = nrounds, by = 50),
  eta = xgb_tune$bestTune$eta,
  max_depth = xgb_tune2$bestTune$max_depth,
  gamma = 0,
  colsample_bytree = c(0.2,0.4, 0.6, 0.8, 1.0),
  min_child_weight = xgb_tune2$bestTune$min_child_weight,
  subsample = seq(0.5,1,length.out=5)
)

xgb_tune3 <- caret::train(
  x = input_x_male,
  y = input_y_male,
  trControl = tune_control,
  tuneGrid = tune_grid3,
  method = "xgbTree",
  verbose = TRUE
)


tune_grid4 <- expand.grid(
  nrounds = seq(from = 50, to = nrounds, by = 50),
  eta = xgb_tune$bestTune$eta,
  max_depth = xgb_tune2$bestTune$max_depth,
  gamma = c(0,  0.1, 0.2, 0.4, 0.8),
  colsample_bytree = xgb_tune3$bestTune$colsample_bytree,
  min_child_weight = xgb_tune2$bestTune$min_child_weight,
  subsample = xgb_tune3$bestTune$subsample
)

xgb_tune4 <- caret::train(
  x = input_x_male,
  y = input_y_male,
  trControl = tune_control,
  tuneGrid = tune_grid4,
  method = "xgbTree",
  verbose = TRUE
)



tune_grid5 <- expand.grid(
  nrounds = seq(from = 100, to = 10000, by = 100),
  eta = c(0.01, 0.025, 0.05, 0.075, 0.1),
  max_depth = xgb_tune2$bestTune$max_depth,
  gamma = xgb_tune4$bestTune$gamma,
  colsample_bytree = xgb_tune3$bestTune$colsample_bytree,
  min_child_weight = xgb_tune2$bestTune$min_child_weight,
  subsample = xgb_tune3$bestTune$subsample
)

xgb_tune5 <- caret::train(
  x = input_x_male,
  y = input_y_male,
  trControl = tune_control,
  tuneGrid = tune_grid5,
  method = "xgbTree",
  verbose = TRUE
)




(final_grid <- expand.grid(
  nrounds = xgb_tune5$bestTune$nrounds,
  eta = xgb_tune5$bestTune$eta,
  max_depth = xgb_tune5$bestTune$max_depth,
  gamma = xgb_tune5$bestTune$gamma,
  colsample_bytree = xgb_tune5$bestTune$colsample_bytree,
  min_child_weight = xgb_tune5$bestTune$min_child_weight,
  subsample = xgb_tune5$bestTune$subsample
))



xgb_male <- caret::train(
  x = input_x_male,
  y = input_y_male,
  trControl = tune_control,
  tuneGrid = final_grid,
  method = "xgbTree",
  verbose = TRUE
)




tune_grid <- expand.grid(
  nrounds = seq(from = 200, to = nrounds, by = 50),
  eta = c(0.025, 0.05, 0.1, 0.3),
  max_depth = c(2, 3, 4, 5, 6),
  gamma = 0,
  colsample_bytree = 1,
  min_child_weight = 1,
  subsample = 1
)



xgb_tune <- caret::train(
  x = input_x_female,
  y = input_y_female,
  trControl = tune_control,
  tuneGrid = tune_grid,
  method = "xgbTree",
  verbose = TRUE
)





tune_grid2 <- expand.grid(
  nrounds = seq(from = 50, to = nrounds, by = 50),
  eta = xgb_tune$bestTune$eta,
  max_depth = ifelse(xgb_tune$bestTune$max_depth == 2,
    c(xgb_tune$bestTune$max_depth:4),
    xgb_tune$bestTune$max_depth - 1:xgb_tune$bestTune$max_depth + 1),
  gamma = 0,
  colsample_bytree = 1,
  min_child_weight = c(1, 2, 3),
  subsample = 1
)

xgb_tune2 <- caret::train(
  x = input_x_female,
  y = input_y_female,
  trControl = tune_control,
  tuneGrid = tune_grid2,
  method = "xgbTree",
  verbose = TRUE
)



tune_grid3 <- expand.grid(
  nrounds = seq(from = 50, to = nrounds, by = 50),
  eta = xgb_tune$bestTune$eta,
  max_depth = xgb_tune2$bestTune$max_depth,
  gamma = 0,
  colsample_bytree = c(0.2,0.4, 0.6, 0.8, 1.0),
  min_child_weight = xgb_tune2$bestTune$min_child_weight,
  subsample = seq(0.5,1,length.out=5)
)

xgb_tune3 <- caret::train(
  x = input_x_female,
  y = input_y_female,
  trControl = tune_control,
  tuneGrid = tune_grid3,
  method = "xgbTree",
  verbose = TRUE
)


tune_grid4 <- expand.grid(
  nrounds = seq(from = 50, to = nrounds, by = 50),
  eta = xgb_tune$bestTune$eta,
  max_depth = xgb_tune2$bestTune$max_depth,
  gamma = c(0,  0.1, 0.2, 0.4, 0.8),
  colsample_bytree = xgb_tune3$bestTune$colsample_bytree,
  min_child_weight = xgb_tune2$bestTune$min_child_weight,
  subsample = xgb_tune3$bestTune$subsample
)

xgb_tune4 <- caret::train(
  x = input_x_female,
  y = input_y_female,
  trControl = tune_control,
  tuneGrid = tune_grid4,
  method = "xgbTree",
  verbose = TRUE
)



tune_grid5 <- expand.grid(
  nrounds = seq(from = 100, to = 10000, by = 100),
  eta = c(0.01, 0.025, 0.05, 0.075, 0.1),
  max_depth = xgb_tune2$bestTune$max_depth,
  gamma = xgb_tune4$bestTune$gamma,
  colsample_bytree = xgb_tune3$bestTune$colsample_bytree,
  min_child_weight = xgb_tune2$bestTune$min_child_weight,
  subsample = xgb_tune3$bestTune$subsample
)

xgb_tune5 <- caret::train(
  x = input_x_female,
  y = input_y_female,
  trControl = tune_control,
  tuneGrid = tune_grid5,
  method = "xgbTree",
  verbose = TRUE
)




(final_grid <- expand.grid(
  nrounds = xgb_tune5$bestTune$nrounds,
  eta = xgb_tune5$bestTune$eta,
  max_depth = xgb_tune5$bestTune$max_depth,
  gamma = xgb_tune5$bestTune$gamma,
  colsample_bytree = xgb_tune5$bestTune$colsample_bytree,
  min_child_weight = xgb_tune5$bestTune$min_child_weight,
  subsample = xgb_tune5$bestTune$subsample
))



xgb_female <- caret::train(
  x = input_x_female,
  y = input_y_female,
  trControl = tune_control,
  tuneGrid = final_grid,
  method = "xgbTree",
  verbose = TRUE
)


 save.image("xgb_yeo.RData")


